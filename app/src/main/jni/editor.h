#define EDITOR "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>编辑器</title>\r\n    \r\n    \r\n    \r\n<style>button {\r\n    padding: 0;\r\n    border: none;\r\n    outline: none;\r\n    font: inherit;\r\n    text-transform: inherit;\r\n    color: inherit;\r\n    background: transparent\r\n}\r\n\r\nhtml {\r\n    color: #0f0f0f;\r\n    background-color: #fff;\r\n    font-size: 10px;\r\n    font-family: Roboto, Arial, sans-serif;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    padding: 0 env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);\r\n    font-size: 1.2rem;\r\n    overflow-x: hidden\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n}\r\n\r\nheader {\r\n    height: 48px\r\n}\r\n\r\n* {\r\n    -ms-flex: 0 1 auto\r\n}\r\n\r\n\r\nhtml {\r\n    word-wrap: break-word;\r\n    color: #0f0f0f;\r\n    background-color: #fff;\r\n    -webkit-text-size-adjust: 100%\r\n}\r\n\r\ninput,\r\ntextarea {\r\n    background-color: transparent;\r\n    padding-bottom: 4px;\r\n    outline: none;\r\n    box-sizing: border-box;\r\n    border: none;\r\n    border-radius: 0;\r\n    margin-bottom: 1px;\r\n    font: inherit;\r\n    color: #0f0f0f\r\n}\r\n\r\ninput::-webkit-input-placeholder,\r\ntextarea::-webkit-input-placeholder {\r\n    color: #606060;\r\n    opacity: 1\r\n}\r\n\r\ninput::placeholder,\r\ntextarea::placeholder {\r\n    color: #606060;\r\n    opacity: 1\r\n}\r\n\r\ntextarea {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    min-height: 8.4rem;\r\n    width: 100%;\r\n    /*border: 1px solid rgba(0, 0, 0, 0.1);*/\r\n    padding: 8px\r\n}\r\n\r\ninput {\r\n    border-bottom: 1px solid #737373;\r\n    text-overflow: ellipsis\r\n}\r\n\r\ninput:focus {\r\n    margin-bottom: 0;\r\n    border-bottom-width: 2px;\r\n    border-bottom-color: #0f0f0f\r\n}\r\n\r\nform {\r\n    margin: 0\r\n}\r\n\r\na {\r\n    color: currentColor;\r\n    text-decoration: none\r\n}\r\n\r\nstrong,\r\nb {\r\n    font-weight: 500\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4 {\r\n    margin: 0 0 3px\r\n}\r\n\r\nh2 {\r\n    font-size: 1.8rem\r\n}\r\n\r\nh3 {\r\n    font-size: 1.4rem\r\n}\r\n\r\nh4 {\r\n    font-size: 1.3rem\r\n}\r\n\r\nimg {\r\n    min-width: 1px;\r\n    min-height: 1px;\r\n    -webkit-filter: none;\r\n    filter: none\r\n}\r\n\r\n:focus {\r\n    outline: none\r\n}\r\n\r\np {\r\n    margin: 8px 0;\r\n    line-height: 1.25\r\n}\r\n\r\n.bar-renderer {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    padding: 0 env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);\r\n    z-index: 3;\r\n    height: 48px;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n    color: #0f0f0f;\r\n    font-size: 1.1rem;\r\n    background: #fff;\r\n\r\n}\r\n\r\n.bar-item-renderer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    flex: 1 1 0;\r\n}\r\n\r\n.bar-item-renderer > svg {\r\n    width: 24px;\r\n    height: 24px;\r\n}\r\n\r\n.bar-item-title {\r\n\r\n    max-width: 100%;\r\n    padding: 0 4px;\r\n    box-sizing: border-box;\r\n    display: block;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    color: #0f0f0f;\r\n\r\n}\r\n</style></head>\r\n\r\n<body>\r\n    <div bind=\"wrapper\" style=\"display: flex;flex-direction: column;height: 100%\">\r\n        <textarea bind=\"textarea\" style=\"flex-grow: 1;font-size: 18px\"></textarea>\r\n        <div style=\"height: 49px;\"></div>\r\n    </div>\r\n    <div class=\"bar-renderer\">\r\n        <div bind=\"\" @click=\"openLink\" class=\"bar-item-renderer\">\r\n            <svg viewbox=\"0 0 24 24\">\r\n                <path d=\"M14.578 16.594l4.641-4.594-4.641-4.594 1.406-1.406 6 6-6 6zM9.422 16.594l-1.406 1.406-6-6 6-6 1.406 1.406-4.641 4.594z\">\r\n                </path>\r\n            </svg>\r\n            <div class=\"bar-item-title\">\r\n                链接\r\n            </div>\r\n        </div>\r\n        <div bind=\"\" @click=\"onTranslateChinese\" class=\"bar-item-renderer\">\r\n            <svg viewbox=\"0 0 24 24\">\r\n                <path d=\"M21.516 20.484v-13.969q0-0.422-0.305-0.727t-0.727-0.305h-9.047l1.313 3.797h1.453v-1.266h1.266v1.266h4.547v1.313h-1.922q-0.703 2.344-2.391 4.219l3.281 3.281-0.938 0.891-3.094-3.094 1.031 3.094-1.969 2.531h6.469q0.422 0 0.727-0.305t0.305-0.727zM13.172 10.594l0.797 2.344 0.844 1.125q1.453-1.594 2.063-3.469h-3.703zM6.984 15.984q2.156 0 3.492-1.359t1.336-3.516q0-0.047-0.141-1.031h-4.688v1.734h2.953q-0.094 0.891-0.844 1.641t-2.109 0.75q-1.313 0-2.227-0.938t-0.914-2.25q0-1.359 0.914-2.297t2.227-0.938q1.266 0 2.063 0.797l1.313-1.266q-1.453-1.313-3.375-1.313-2.063 0-3.516 1.477t-1.453 3.539 1.453 3.516 3.516 1.453zM21 3.984q0.797 0 1.406 0.609t0.609 1.406v15q0 0.797-0.609 1.406t-1.406 0.609h-9l-0.984-3h-8.016q-0.797 0-1.406-0.609t-0.609-1.406v-15q0-0.797 0.609-1.406t1.406-0.609h6.984l1.031 3h9.984z\">\r\n                </path>\r\n            </svg>\r\n            <div class=\"bar-item-title\">\r\n                中文\r\n            </div>\r\n        </div>\r\n        <div bind=\"\" @click=\"onCopyLine\" class=\"bar-item-renderer\">\r\n            <svg viewbox=\"0 0 24 24\">\r\n                <path d=\"M18.984 21v-14.016h-10.969v14.016h10.969zM18.984 5.016q0.797 0 1.406 0.586t0.609 1.383v14.016q0 0.797-0.609 1.406t-1.406 0.609h-10.969q-0.797 0-1.406-0.609t-0.609-1.406v-14.016q0-0.797 0.609-1.383t1.406-0.586h10.969zM15.984 0.984v2.016h-12v14.016h-1.969v-14.016q0-0.797 0.586-1.406t1.383-0.609h12z\"></path>\r\n            </svg>\r\n            <div class=\"bar-item-title\">\r\n                复制\r\n            </div>\r\n        </div>\r\n        <div bind=\"\" @click=\"onSave\" class=\"bar-item-renderer\">\r\n            <svg viewbox=\"0 0 24 24\">\r\n                <path d=\"M15 9v-3.984h-9.984v3.984h9.984zM12 18.984q1.219 0 2.109-0.891t0.891-2.109-0.891-2.109-2.109-0.891-2.109 0.891-0.891 2.109 0.891 2.109 2.109 0.891zM17.016 3l3.984 3.984v12q0 0.797-0.609 1.406t-1.406 0.609h-13.969q-0.844 0-1.43-0.586t-0.586-1.43v-13.969q0-0.844 0.586-1.43t1.43-0.586h12z\">\r\n                </path>\r\n            </svg>\r\n            <div class=\"bar-item-title\">\r\n                保存\r\n            </div>\r\n        </div>\r\n        <div bind=\"\" @click=\"onShow\" class=\"bar-item-renderer\">\r\n            <svg viewbox=\"0 0 24 24\">\r\n                <path d=\"M3 6h18v2.016h-18v-2.016zM3 12.984v-1.969h18v1.969h-18zM3 18v-2.016h18v2.016h-18z\"></path>\r\n            </svg>\r\n            <div class=\"bar-item-title\">\r\n                菜单\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <custom-toast bind=\"toast\"></custom-toast>\r\n    <custom-bottom-sheet bind=\"customBottomSheet\" @submit=\"onCustomBottomSheet\" style=\"display:none;\">\r\n    </custom-bottom-sheet>\r\n    \r\n<script>class CustomToast extends HTMLElement {\r\n    static get observedAttributes() {\r\n        return ['message'];\r\n    }\r\n\r\n    // Fires when an instance of the element is created or updated\r\n    constructor() {\r\n        super();\r\n        this.root = this.attachShadow({\r\n            mode: 'open'\r\n        });\r\n        const style = document.createElement('style');\r\n        style.textContent = CustomToast.getStyle();\r\n        this.root.appendChild(style);\r\n        const c3Toast = document.createElement('DIV');\r\n        c3Toast.setAttribute('class', 'c3-toast');\r\n\r\n        const notificationActionRenderer = document.createElement('DIV');\r\n        notificationActionRenderer.setAttribute('class', 'notification-action-renderer');\r\n        const notificationActionResponseText = document.createElement('DIV');\r\n        notificationActionResponseText.setAttribute('class', 'notification-action-response-text');\r\n        notificationActionRenderer.appendChild(notificationActionResponseText);\r\n        c3Toast.appendChild(notificationActionRenderer);\r\n        this.root.appendChild(c3Toast);\r\n\r\n        this.c3Toast = c3Toast;\r\n        this.notificationActionResponseText = notificationActionResponseText;\r\n        this.messages = [];\r\n        this.timer = 0;\r\n    }\r\n\r\n    // Fires when an instance was inserted into the document\r\n    connectedCallback() {\r\n    }\r\n\r\n    // Fires when an instance was removed from the document\r\n    disconnectedCallback() {\r\n    }\r\n\r\n    showMessage() {\r\n        if (this.messages.length && !this.showing) {\r\n            const message = this.messages.shift();\r\n            this.notificationActionResponseText.textContent = message;\r\n            this.c3Toast.setAttribute('dir', 'in');\r\n            this.showing = true;\r\n            if (this.timer) {\r\n                clearTimeout(this.timer);\r\n            }\r\n            this.timer = setTimeout(() => {\r\n                this.c3Toast.setAttribute('dir', 'out');\r\n                setTimeout(() => {\r\n                    this.showing = false;\r\n                    this.showMessage();\r\n                }, 195);\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    // Fires when an attribute was added, removed, or updated\r\n    attributeChangedCallback(attrName, oldVal, newVal) {\r\n        if (attrName === 'message') {\r\n            this.messages.push(newVal);\r\n            this.showMessage();\r\n        }\r\n    }\r\n\r\n    // Fires when an element is moved to a new document\r\n    adoptedCallback() {\r\n    }\r\n\r\n    static getTemplate(value) {\r\n        return `\r\n${CustomToast.getStyle()}\r\n<div>\r\n    ${value}\r\n</div>\r\n`;\r\n    }\r\n\r\n    static getStyle() {\r\n        return `\r\n.c3-toast[dir=\"in\"] {\r\n    transition: margin 225ms cubic-bezier(0.0, 0.0, 0.2, 1);\r\n    margin-top: 0;\r\n}\r\n\r\n.c3-toast[dir=\"out\"] {\r\n    transition: margin 195ms cubic-bezier(0.4, 0.0, 1, 1);\r\n}\r\n\r\n.c3-toast {\r\n    display: block;\r\n    position: fixed;\r\n    z-index: 999;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    box-sizing: border-box;\r\n    padding: 14px 24px;\r\n    font-size: 1.4rem;\r\n    color: #ffffff;\r\n    background: hsl(0, 0%, 20%);\r\n    will-change: transform;\r\n    margin-top: -100%;\r\n}\r\n\r\n.notification-action-renderer {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.notification-action-response-text {\r\n    flex-grow: 1;\r\n    padding-right: 1rem;\r\n    font-size:14px;\r\n}\r\n\r\n`;\r\n    }\r\n}\r\n\r\ncustomElements.define('custom-toast', CustomToast);\r\n/*\r\n<!--\r\n<custom-toast id=\"toast\"></custom-toast>\r\n<script src=\"toast.js\"></script>\r\ndocument.getElementById('toast').setAttribute('message','');-\r\n-->\r\n*/</script><script>\r\n(() => {\r\n  class CustomBottomSheet extends HTMLElement {\r\n\r\n    constructor() {\r\n      super();\r\n      this.attachShadow({\r\n        mode: 'open'\r\n      });\r\n      const wrapper = document.createElement(\"div\");\r\n      wrapper.setAttribute(\"class\", \"wrapper\");\r\n      const style = document.createElement('style');\r\n      style.textContent = `.icon {\r\n\r\n  display: inline-block;\r\n  flex-shrink: 0;\r\n  width: 24px;\r\n  height: 24px;\r\n  fill: currentColor;\r\n  stroke: none;\r\n  margin-right: 12px;\r\n\r\n}\r\n\r\n\r\nbutton {\r\n  padding: 0;\r\n  border: none;\r\n  outline: none;\r\n  font: inherit;\r\n  text-transform: inherit;\r\n  color: inherit;\r\n  background: transparent\r\n}\r\n\r\nbutton {\r\n\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n  text-align: initial;\r\n  text-transform: unset;\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 0;\r\n  margin-left: 12px;\r\n  font-size: 1.6rem;\r\n  line-height: 2.2rem;\r\n\r\n}\r\n\r\n.menu-item {\r\n\r\n  padding: 0;\r\n  height: 48px;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n\r\n}\r\n\r\n.bottom-sheet-layout-content-wrapper {\r\n\r\n  -webkit-box-flex: 1;\r\n  flex: 1;\r\n  overflow-y: scroll;\r\n  max-height: 379.2px;\r\n\r\n}\r\n\r\n.bottom-sheet-layout-header-title-wrapper {\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n  flex-direction: column;\r\n  display: flex;\r\n  margin-left: 12px\r\n}\r\n\r\n.bottom-sheet-layout-header {\r\n  -webkit-box-pack: justify;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  margin-top: 8px\r\n}\r\n\r\n.bottom-sheet-drag-line {\r\n  background: #0f0f0f;\r\n  opacity: .15;\r\n  border-radius: 4px;\r\n  height: 4px;\r\n  margin: 0 auto;\r\n  width: 40px;\r\n  margin-top: 8px\r\n}\r\n\r\n.bottom-sheet-layout-header-wrapper {\r\n  overflow: hidden;\r\n  -webkit-box-flex: 0;\r\n  flex: none;\r\n  border-bottom: 1px solid #fff\r\n}\r\n\r\n.bottom-sheet-layout {\r\n  border-radius: 12px;\r\n  background-color: #fff;\r\n  display: block;\r\n  overflow: hidden;\r\n  position: fixed;\r\n  margin: 0 8px 24px;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 2\r\n}\r\n\r\n.overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1;\r\n  cursor: pointer;\r\n  background-color: rgba(0, 0, 0, 0.6)\r\n}\r\n\r\n.wrapper {\r\n  position: fixed;\r\n  z-index: 5\r\n}`;\r\n      this.wrapper = wrapper;\r\n      this.shadowRoot.append(style, wrapper);\r\n    }\r\n    close() {\r\n      this.style.display = 'none';\r\n    }\r\n    click(evt) {\r\n      this.dispatchEvent(new CustomEvent('submit', {\r\n        detail: {\r\n          id: evt.currentTarget.dataset.id\r\n        }\r\n      }));\r\n    }\r\n    set data(value) {\r\n      \r\n\r\n      this.contentWrapper.insertAdjacentHTML('afterbegin', value.map(element => {\r\n        return `<div bind=\"\" @click=\"click\" data-id=\"${element.id}\" class=\"menu-item\">\r\n  <button>\r\n    <div class=\"icon\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M12.71,12l8.15,8.15l-0.71,0.71L12,12.71l-8.15,8.15l-0.71-0.71L11.29,12L3.15,3.85l0.71-0.71L12,11.29l8.15-8.15l0.71,0.71 L12.71,12z\"></path>\r\n      </svg>\r\n    </div>\r\n    ${element.title}\r\n  </button>\r\n</div>`;\r\n      }).join(''));\r\n      /////////////////////\r\n      this.contentWrapper.querySelectorAll('[bind]').forEach(element => {\r\n        if (element.getAttribute('bind')) {\r\n          this[element.getAttribute('bind')] = element;\r\n        }\r\n        [...element.attributes].filter(attr => attr.nodeName.startsWith('@')).forEach(attr => {\r\n          if (!attr.value) return;\r\n          element.addEventListener(attr.nodeName.slice(1), evt => {\r\n            this[attr.value](evt);\r\n          });\r\n        });\r\n      })\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.wrapper.innerHTML = `<div bind=\"\" @click=\"close\" class=\"overlay\">\r\n</div>\r\n<div class=\"bottom-sheet-layout\">\r\n  <div class=\"bottom-sheet-layout-header-wrapper\">\r\n    <div class=\"bottom-sheet-drag-line\">\r\n    </div>\r\n    <div class=\"bottom-sheet-layout-header\">\r\n      <div class=\"bottom-sheet-layout-header-title-wrapper\">\r\n      </div>\r\n      <div bind=\"contentWrapper\" class=\"bottom-sheet-layout-content-wrapper\">\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n      this.wrapper.querySelectorAll('[bind]').forEach(element => {\r\n        if (element.getAttribute('bind')) {\r\n          this[element.getAttribute('bind')] = element;\r\n        }\r\n        [...element.attributes].filter(attr => attr.nodeName.startsWith('@')).forEach(attr => {\r\n          if (!attr.value) return;\r\n          element.addEventListener(attr.nodeName.slice(1), evt => {\r\n            this[attr.value](evt);\r\n          });\r\n        });\r\n      });\r\n\r\n\r\n      this.contentWrapper.innerHTML = `<div bind=\"\" @click=\"close\" class=\"menu-item\">\r\n    <button>\r\n      <div class=\"icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewbox=\"0 0 24 24\" width=\"24\">\r\n          <path d=\"M12.71,12l8.15,8.15l-0.71,0.71L12,12.71l-8.15,8.15l-0.71-0.71L11.29,12L3.15,3.85l0.71-0.71L12,11.29l8.15-8.15l0.71,0.71 L12.71,12z\"></path>\r\n        </svg>\r\n      </div>\r\n      取消\r\n    </button>\r\n  </div>`\r\n    }\r\n\r\n  }\r\n\r\n  customElements.define('custom-bottom-sheet', CustomBottomSheet);\r\n  /*\r\n  <!--\r\n                      <script src=\"custom-bottom-sheet.js\"></script>\r\n<custom-bottom-sheet bind=\"customBottomSheet\" @submit=\"onCustomBottomSheet\"></custom-bottom-sheet>\r\ncustomElements.whenDefined('custom-bottom-sheet').then(() => {\r\ncustomBottomSheet.data = []\r\n})\r\n-->\r\n*/\r\n})();\r\n</script><script>/*\r\n绑定元素和事件\r\n例如：<div bind=\"div\" @click=\"click\"></div>\r\n执行下列代码后，即可通过 this.div 访问该元素\r\n在全局下编写click函数，即可自动绑定到该元素的click事件\r\n*/\r\nfunction bind(elememnt) {\r\n    (elememnt || document).querySelectorAll('[bind]').forEach(element => {\r\n        if (element.getAttribute('bind')) {\r\n            window[element.getAttribute('bind')] = element;\r\n        }\r\n        [...element.attributes].filter(attr => attr.nodeName.startsWith('@')).forEach(attr => {\r\n            if (!attr.value) return;\r\n            element.addEventListener(attr.nodeName.slice(1), evt => {\r\n                window[attr.value](evt);\r\n            });\r\n        });\r\n    })\r\n}\r\n\r\nfunction camel(string) {\r\n    return string.replaceAll(/[ _-]([a-zA-Z])/g, m => m[1].toUpperCase());\r\n}\r\n\r\n\r\nfunction findBlock(textarea) {\r\n    let start = textarea.selectionStart;\r\n    let end = textarea.selectionEnd;\r\n    const strings = textarea.value;\r\n    if (strings[start] === '\\n' && start - 1 > 0) {\r\n        start--;\r\n    }\r\n    let founded = false;\r\n    while (start > 0) {\r\n        if (strings[start] == '\\n') {\r\n            let j = start - 1;\r\n            while (j > 0 && /\\s/.test(strings[j])) {\r\n                if (strings[j] === '\\n') {\r\n                    founded = true;\r\n                    break;\r\n                }\r\n                j--;\r\n            }\r\n        }\r\n        if (founded) {\r\n            break\r\n        }\r\n        start--;\r\n    }\r\n    founded = false;\r\n    while (end + 1 < strings.length) {\r\n        if (strings[end] == '\\n') {\r\n            let j = end + 1;\r\n            while (j + 1 < strings.length && /\\s/.test(strings[j])) {\r\n                if (strings[j] === '\\n') {\r\n                    founded = true;\r\n                    break;\r\n                }\r\n                j++;\r\n            }\r\n        }\r\n        if (founded) {\r\n            break\r\n        }\r\n        end++;\r\n    }\r\n    return [start, end]\r\n}\r\n\r\nfunction findCodeBlock(textarea) {\r\n    const value = textarea.value;\r\n    let start = textarea.selectionStart;\r\n    let end = textarea.selectionEnd;\r\n    while (start > -1) {\r\n        if (value[start] === '`' && value[start - 1] === '`' && value[start - 2] === '`') {\r\n            start += 1;\r\n            while (start < value.length) {\r\n                if (value[start] === '\\n') {\r\n                    start++;\r\n                    break;\r\n                }\r\n                start++;\r\n            }\r\n            break;\r\n        }\r\n        start--;\r\n    }\r\n    while (end < value.length) {\r\n        if (value[end] === '`' && value[end + 1] === '`' && value[end + 2] === '`') {\r\n            end--;\r\n            break;\r\n        }\r\n        end++;\r\n    }\r\n    return [start, end];\r\n}\r\n\r\nfunction findExtendPosition(editor) {\r\n    const start = editor.selectionStart;\r\n    const end = editor.selectionEnd;\r\n    let string = editor.value;\r\n    let offsetStart = start;\r\n    while (offsetStart > 0) {\r\n        if (!/\\s/.test(string[offsetStart - 1])) offsetStart--; else {\r\n            let os = offsetStart;\r\n            while (os > 0 && /\\s/.test(string[os - 1])) {\r\n                os--;\r\n            }\r\n            if ([...string.substring(offsetStart, os).matchAll(/\\n/g)].length > 1) {\r\n                break;\r\n            }\r\n            offsetStart = os;\r\n        }\r\n    }\r\n    let offsetEnd = end;\r\n    while (offsetEnd < string.length) {\r\n        if (!/\\s/.test(string[offsetEnd + 1])) {\r\n            offsetEnd++;\r\n        } else {\r\n            let oe = offsetEnd;\r\n            while (oe < string.length && /\\s/.test(string[oe + 1])) {\r\n                oe++;\r\n            }\r\n            if ([...string.substring(offsetEnd, oe + 1).matchAll(/\\n/g)].length > 1) {\r\n                offsetEnd++;\r\n                break;\r\n            }\r\n            offsetEnd = oe + 1;\r\n        }\r\n    }\r\n    while (offsetStart > 0 && string[offsetStart - 1] !== '\\n') {\r\n        offsetStart--;\r\n    }\r\n    // if (/\\s/.test(string[offsetEnd])) {\r\n    //     offsetEnd--;\r\n    // }\r\n    return [offsetStart, offsetEnd];\r\n}\r\n\r\nfunction getLine() {\r\n    let start = textarea.selectionStart;\r\n    const strings = textarea.value;\r\n    if (strings[start] === '\\n' && start - 1 > 0) {\r\n        start--;\r\n    }\r\n    while (start > 0 && strings[start] != '\\n') {\r\n        start--;\r\n    }\r\n    let end = textarea.selectionEnd;\r\n    while (end - 1 < strings.length && strings[end] != '\\n') {\r\n        end++;\r\n    }\r\n    return [strings.substring(start, end), start, end]\r\n}\r\n\r\nfunction getSelectedString(textarea) {\r\n    return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);\r\n}\r\n\r\nfunction humanFileSize(size) {\r\n    if (size === 0) return '0';\r\n    var i = Math.floor(Math.log(size) / Math.log(1024));\r\n    return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]\r\n}\r\n\r\nfunction jumpPage(textarea) {\r\n    const line = getLine(textarea);\r\n    const value = /(?<=(href|src)=\")[^\"]+(?=\")/.exec(line);\r\n    const path = new URL(window.location).searchParams.get(\"path\");\r\n    if (!value) {\r\n        window.open('http://127.0.0.1:8081/' + substringBeforeLast(substringAfter(path, \"\\\\app\\\\\"), \".\"), \"_blank\");\r\n        return\r\n    }\r\n    const src = `${window.location.origin}${window.location.pathname}?path=${encodeURIComponent(`${substringBeforeLast(path, \"/\")}/${value[0]}`)}`;\r\n    window.open(src, '_blank');\r\n}\r\n\r\nasync function loadData() {\r\n    const response = await fetch(`${baseUri}/api/note?action=1&id=${id}`);\r\n    return await response.json();\r\n}\r\nfunction onInsert() {\r\n    this.textarea.setRangeText(`/*\r\n  */`, this.textarea.selectionStart, this.textarea.selectionEnd)\r\n}\r\n\r\nasync function onSave() {\r\n    const firstLine = textarea.value.trim().split(\"\\n\", 2)[0];\r\n    const obj = {\r\n        content: substringAfter(textarea.value.trim(), \"\\n\"),\r\n        title: firstLine.replace(/^#+ +/, ''),\r\n    };\r\n    if (id) {\r\n        obj._id = parseInt(id);\r\n    }\r\n    if (obj.title.indexOf('|') !== -1) {\r\n        obj.tag = substringAfter(obj.title, '|').trim();\r\n        obj.title = substringBefore(obj.title, '|').trim();\r\n    }\r\n    const response = await fetch(`${baseUri}/api/note`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(obj)\r\n    });\r\n    await response.text();\r\n    // const results = await response.json();\r\n    // if (results.id) {\r\n    //     window.history.replaceState(null, null, '?id=' + results.id);\r\n    // }\r\n    toast.setAttribute('message', '成功');\r\n}\r\n\r\nasync function onTranslateChinese() {\r\n    let array1 = getLine();\r\n    textarea.setRangeText(`\\n\\n${await translate(array1[0], 'zh')}\r\n          `, array1[2], array1[2], 'end');\r\n}\r\n\r\nasync function onTranslateEnglish() {\r\n    let array1 = getLine();\r\n    textarea.setRangeText(`\\n\\n${await translate(array1[0], 'en')}\r\n          `, array1[2], array1[2], 'end');\r\n}\r\n\r\nasync function pasteCode() {\r\n    let strings;\r\n    if (typeof NativeAndroid !== 'undefined') {\r\n        strings = NativeAndroid.readText()\r\n    } else {\r\n        strings = await navigator.clipboard.readText()\r\n    }\r\n    textarea.setRangeText(`\r\n\\`\\`\\`javascript\r\n${strings}\r\n\\`\\`\\`\r\n`, textarea.selectionStart, textarea.selectionEnd, 'end');\r\n}\r\n\r\nasync function readText() {\r\n    // const textarea = document.createElement(\"textarea\");\r\n    // textarea.style.position = 'fixed';\r\n    // textarea.style.right = '100%';\r\n    // document.body.appendChild(textarea);\r\n    // textarea.value = message;\r\n    // textarea.select();\r\n    // document.execCommand('paste');\r\n    // return textarea.value;\r\n\r\n    let strings;\r\n    if (typeof NativeAndroid !== 'undefined') {\r\n        strings = NativeAndroid.readText()\r\n    } else {\r\n        strings = await navigator.clipboard.readText()\r\n    }\r\n    return strings\r\n}\r\n\r\nasync function removeLines() {\r\n    if (textarea.selectionStart === textarea.selectionEnd) {\r\n        const p = findExtendPosition(textarea);\r\n        let start = p[0];\r\n        while (start > -1 && /\\s/.test(textarea.value[start - 1])) {\r\n            start--;\r\n        }\r\n        let end = p[1];\r\n        while (end + 1 < textarea.value.length && /\\s/.test(textarea.value[end + 1])) end++;\r\n        if (typeof NativeAndroid !== 'undefined') {\r\n            NativeAndroid.writeText(textarea.value.substring(start, end));\r\n        } else {\r\n            await navigator.clipboard.writeText(textarea.value.substring(start, end))\r\n        }\r\n        textarea.setRangeText('\\n', start, end);\r\n        textarea.selectionEnd = start;\r\n    } else {\r\n        textarea.value = textarea.value.substring(textarea.selectionEnd);\r\n        textarea.selectionStart = 0;\r\n        textarea.selectionEnd = 0;\r\n        textarea.scrollLeft = 0;\r\n        textarea.scrollTop = 0;\r\n    }\r\n}\r\n\r\nasync function render() {\r\n    textarea.value = localStorage.getItem(\"content\");\r\n\r\n    if (id) {\r\n        try {\r\n            const obj = await loadData();\r\n            document.title = obj.title;\r\n            textarea.value = `# ${obj.title}|${obj.tag}\r\n        \r\n${obj.content.trim()}\r\n        `\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n\r\nfunction snake(string) {\r\n    return string.replaceAll(/(?<=[a-z])[A-Z]/g, m => `_${m}`).toLowerCase()\r\n        .replaceAll(/[ -]([a-z])/g, m => `_${m[1]}`)\r\n}\r\n\r\nfunction sortLines() {\r\n    const points = findBlock(textarea);\r\n    const lines = textarea.value.substring(points[0], points[1]).split('\\n')\r\n        .sort((x, y) => x.localeCompare(y));\r\n    textarea.setRangeText(`\\n\\n${lines.join('\\n')}`, points[0], points[1], 'end');\r\n}\r\n\r\nfunction substring(strings, prefix, suffix) {\r\n    let start = strings.indexOf(prefix);\r\n    if (start === -1) {\r\n        return [0, 0]\r\n    }\r\n    start += prefix.length;\r\n    let end = strings.indexOf(suffix, start);\r\n    if (end === -1) {\r\n        return [0, 0]\r\n    }\r\n    return [start, end]\r\n}\r\n\r\nfunction substringAfter(string, delimiter, missingDelimiterValue) {\r\n    const index = string.indexOf(delimiter);\r\n    if (index === -1) {\r\n        return missingDelimiterValue || string;\r\n    } else {\r\n        return string.substring(index + delimiter.length);\r\n    }\r\n}\r\n\r\nfunction substringAfterLast(string, delimiter, missingDelimiterValue) {\r\n    const index = string.lastIndexOf(delimiter);\r\n    if (index === -1) {\r\n        return missingDelimiterValue || string;\r\n    } else {\r\n        return string.substring(index + delimiter.length);\r\n    }\r\n}\r\n\r\nfunction substringBefore(string, delimiter, missingDelimiterValue) {\r\n    const index = string.indexOf(delimiter);\r\n    if (index === -1) {\r\n        return missingDelimiterValue || string;\r\n    } else {\r\n        return string.substring(0, index);\r\n    }\r\n}\r\n\r\nfunction substringBeforeLast(string, delimiter, missingDelimiterValue) {\r\n    const index = string.lastIndexOf(delimiter);\r\n    if (index === -1) {\r\n        return missingDelimiterValue || string;\r\n    } else {\r\n        return string.substring(0, index);\r\n    }\r\n}\r\n\r\nfunction substringNearest(string, index, start, end) {\r\n    let j = index;\r\n    while (j > -1) {\r\n        if (start.indexOf(string[j]) !== -1) {\r\n            j++\r\n            break;\r\n        }\r\n        j--;\r\n    }\r\n    let k = index;\r\n    while (k < string.length) {\r\n        if (end.indexOf(string[k]) !== -1) {\r\n            break;\r\n        }\r\n        k++;\r\n    }\r\n    return string.substring(j, k);\r\n}\r\n\r\nfunction tab(textarea) {\r\n    textarea.addEventListener('keydown', function (e) {\r\n        if (e.keyCode === 9) {\r\n            const p = findExtendPosition(textarea);\r\n            const start = this.selectionStart;\r\n            textarea.setRangeText(\r\n                textarea.value.substring(p[0], p[1])\r\n                    .split('\\n')\r\n                    .map(i => {\r\n                        return '\\t' + i;\r\n                    })\r\n                    .join('\\n'), p[0], p[1]);\r\n            this.selectionStart = this.selectionEnd = start + 1;\r\n            // prevent the focus lose\r\n            e.preventDefault();\r\n        }\r\n    }, false);\r\n}\r\n\r\nfunction toBlocks(string) {\r\n    let count = 0;\r\n    let buf = [];\r\n    const blocks = [];\r\n    for (let i = 0; i < string.length; i++) {\r\n        buf.push(string[i])\r\n        if (string[i] === '{') {\r\n            count++;\r\n        } else if (string[i] === '}') {\r\n            count--;\r\n            if (count === 0) {\r\n                blocks.push(buf.join(''))\r\n                buf = [];\r\n            }\r\n        }\r\n    }\r\n    return blocks;\r\n}\r\n\r\nasync function translate(value, to) {\r\n    try {\r\n        const response = await fetch(`${window.location.protocol}//kpkpkp.cn/api/trans?q=${encodeURIComponent(value.trim())}&to=${to}`);\r\n        const obj = await response.json();\r\n        return obj.sentences.map((element, index) => {\r\n            return element.trans;\r\n        }).join(' ');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction tryUploadImageFromClipboard(success, error) {\r\n    navigator.permissions.query({\r\n        name: \"clipboard-read\"\r\n    }).then(result => {\r\n        if (result.state === \"granted\" || result.state === \"prompt\") {\r\n            navigator.clipboard.read().then(data => {\r\n                console.log(data[0].types);\r\n                const blob = data[0].getType(\"image/png\");\r\n                console.log(blob.then(res => {\r\n                    const formData = new FormData();\r\n                    formData.append(\"images\", res, \"1.png\");\r\n                    fetch(`https://lucidu.cn/api/article/2`, {\r\n                        method: \"POST\", body: formData\r\n                    }).then(res => {\r\n                        return res.text();\r\n                    }).then(obj => {\r\n                        success(obj);\r\n                    })\r\n                }).catch(err => {\r\n                    console.log(err)\r\n                    error(err);\r\n                }))\r\n            })\r\n                .catch(err => {\r\n                    error(err);\r\n                });\r\n        } else {\r\n            error(new Error());\r\n        }\r\n    });\r\n}\r\n\r\nfunction uploadHanlder(editor) {\r\n    tryUploadImageFromClipboard((ok) => {\r\n        const string = `![](https://static.lucidu.cn/images/${ok})\\n\\n`;\r\n        editor.setRangeText(string, editor.selectionStart, editor.selectionStart);\r\n    }, () => {\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.addEventListener('change', async ev => {\r\n            const file = input.files[0];\r\n            const imageFile = await uploadImage(file, file.name);\r\n            const string = `![](https://static.lucidu.cn/images/${imageFile})\\n\\n`;\r\n            editor.setRangeText(string, editor.selectionStart, editor.selectionStart);\r\n        });\r\n        input.click();\r\n    });\r\n}\r\n\r\nasync function uploadImage(image, name) {\r\n    const form = new FormData();\r\n    form.append('images', image, name)\r\n    const response = await fetch(`https://lucidu.cn/api/article/2`, {\r\n        method: 'POST', body: form\r\n    });\r\n    return await response.text();\r\n}\r\n\r\nfunction upperCamel(string) {\r\n    string = camel(string);\r\n    return string.slice(0, 1).toUpperCase() + string.slice(1);\r\n}\r\n\r\nfunction writeText(message) {\r\n    const textarea = document.createElement(\"textarea\");\r\n    textarea.style.position = 'fixed';\r\n    textarea.style.right = '100%';\r\n    document.body.appendChild(textarea);\r\n    textarea.value = message;\r\n    textarea.select();\r\n    document.execCommand('copy');\r\n    textarea.remove();\r\n}\r\n\r\nfunction openLink() {\r\n    let start = textarea.selectionStart;\r\n    let end = textarea.selectionEnd;\r\n    while (start > -1 && textarea.value[start] !== ' ' && textarea.value[start] !== '(' && textarea.value[start] !== '\\n') {\r\n        start--;\r\n    }\r\n    while (end < textarea.value.length && textarea.value[end] !== ' ' && textarea.value[end] !== ')' && textarea.value[end] !== '\\n') {\r\n        end++;\r\n    }\r\n\r\n    if (textarea.selectionStart === textarea.selectionEnd) {\r\n        window.open(textarea.value.substring(start + 1, end));\r\n    } else {\r\n        textarea.setRangeText(` [](${textarea.value.substring(start, end).trim()})`, start, end, 'end');\r\n    }\r\n\r\n}\r\nfunction onCopy() {\r\n    const pv = findCodeBlock(textarea);\r\n    writeText(textarea.value.substring(pv[0], pv[1]));\r\n}\r\nfunction onShow() {\r\n    customBottomSheet.style.display = 'block'\r\n}\r\nfunction onPreview() {\r\n    location.href = `/markdown?id=${id}`\r\n}\r\nfunction onCode() {\r\n    pasteCode();\r\n}\r\n///////////////////\r\nbind();\r\ncustomElements.whenDefined('custom-bottom-sheet').then(() => {\r\n    customBottomSheet.data = [{\r\n        id: 4,\r\n        title: \"翻译英文\"\r\n    }, {\r\n        id: 3,\r\n        title: \"评论\"\r\n    }, {\r\n        id: 5,\r\n        title: \"粘贴代码\"\r\n    }, {\r\n        id: 1,\r\n        title: \"复制代码块\"\r\n    }, {\r\n        id: 2,\r\n        title: \"预览\"\r\n    }, {\r\n        id: 6,\r\n        title: \"执行代码\"\r\n    }]\r\n})\r\nfunction onCustomBottomSheet(evt) {\r\n    customBottomSheet.style.display = 'none';\r\n    switch (evt.detail.id) {\r\n        case \"1\":\r\n            onCopy();\r\n            break;\r\n        case \"2\":\r\n            onPreview();\r\n            break;\r\n        case \"3\":\r\n            onInsert();\r\n            break;\r\n        case \"4\":\r\n            onTranslateEnglish();\r\n            break;\r\n        case \"5\":\r\n            onCode();\r\n            break;\r\n        case \"6\":\r\n            onEval();\r\n            break;\r\n\r\n    }\r\n}\r\ndocument.addEventListener('visibilitychange', () => {\r\n    localStorage.setItem('contents', textarea.value);\r\n})\r\ntextarea.value = localStorage.getItem('contents') || '';\r\nconst id = new URL(window.location).searchParams.get(\"id\");\r\nlet baseUri = window.location.host === '127.0.0.1:5500' ? 'http://192.168.8.55:10808' : '';\r\nrender();\r\ndocument.addEventListener('keydown', async evt => {\r\n    if (evt.ctrlKey) {\r\n        if (evt.key === 's') {\r\n            evt.preventDefault();\r\n            await onSave();\r\n        } else if (evt.key === 'j') {\r\n            evt.preventDefault();\r\n            openLink();\r\n        } else if (evt.key === 'o') {\r\n            evt.preventDefault();\r\n            sortLines();\r\n        } else if (evt.key === 'p') {\r\n            evt.preventDefault();\r\n            onPreview();\r\n        } else if (evt.key === 'k') {\r\n            evt.preventDefault();\r\n            insertLink();\r\n        } else if (evt.key === 'e') {\r\n            evt.preventDefault();\r\n            onEval();\r\n        } else if (evt.key === 'l') {\r\n            evt.preventDefault();\r\n            onCode()\r\n        } else if (evt.key === '1') {\r\n            evt.preventDefault();\r\n            const pv = findCodeBlock(textarea);\r\n            navigator.clipboard.writeText(textarea.value.substring(pv[0], pv[1]));\r\n        } else if (evt.key === '2') {\r\n            evt.preventDefault();\r\n            const p = findCodeBlock(textarea);\r\n            textarea.setRangeText(await navigator.clipboard.readText(), p[0], p[1]);\r\n        }\r\n    }\r\n});\r\n\r\nasync function insertLink() {\r\n    const strings = await readText();\r\n    const name = substringAfterLast('#');\r\n    textarea.setRangeText(\r\n        `- [${name}](${strings})`,\r\n        textarea.selectionStart,\r\n        textarea.selectionEnd,\r\n        'end'\r\n    )\r\n}\r\nasync function onEval() {\r\n    const p = findBlock(textarea);\r\n    const s = textarea.value.substring(p[0], p[1]);\r\n\r\n    textarea.setRangeText(\r\n        ` = ${eval(s)}`,\r\n        p[1],\r\n        p[1],\r\n        'end'\r\n    )\r\n}\r\nfunction copyLine(editor, count) {\r\n    const start = editor.selectionStart;\r\n    const end = editor.selectionEnd;\r\n    const string = editor.value;\r\n    let offsetStart = start;\r\n    while (offsetStart > 0) {\r\n        if (string[offsetStart - 1] !== '\\n')\r\n            offsetStart--;\r\n        else {\r\n            // while (offsetStart > 0) {\r\n            //     if (/\\s/.test(string[offsetStart - 1]))\r\n            //         offsetStart--;\r\n            //     else break;\r\n            // }\r\n            break;\r\n        }\r\n    }\r\n    let offsetEnd = end;\r\n    while (offsetEnd < string.length) {\r\n        if (string[offsetEnd + 1] !== '\\n')\r\n            offsetEnd++;\r\n        else {\r\n            /* while (offsetEnd < string.length) {\r\n                 if (/\\s/.test(string[offsetEnd + 1]))\r\n                     offsetEnd++;\r\n                 else break;\r\n             }*/\r\n            offsetEnd++;\r\n            break;\r\n        }\r\n    }\r\n    const str = string.substring(offsetStart, offsetEnd).trim();\r\n    writeText(str);\r\n    editor.focus()\r\n}\r\n\r\nfunction onCopyLine() {\r\n    copyLine(textarea);\r\n}</script></body>\r\n\r\n</html>"